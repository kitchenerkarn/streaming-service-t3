import { type AppType } from "next/app";
import { type Session } from "next-auth";
import { SessionProvider } from "next-auth/react";
import { signIn, useSession } from "next-auth/react";
import "~/styles/globals.css";
import Head from "next/head";
import { FcGoogle } from "react-icons/fc";
import { FaGithub } from "react-icons/fa";
import React from "react";
import { api } from "~/utils/api";

const MyApp: AppType<{ session: Session | null }> = ({
  Component,
  pageProps: { session, ...pageProps },
}) => {
  return (
    <SessionProvider session={session}>
      <ProtectedRoute>
        <Component {...pageProps} />
      </ProtectedRoute>
    </SessionProvider>
  );
};

const ProtectedRoute: React.FC<React.HTMLAttributes<HTMLElement>> = ({
  ...props
}) => {
  const user = useSession();

  if (user.status === "loading") {
    return <></>;
  }

  return (
    <>
      {user?.data?.user ? (
        props.children
      ) : (
        <>
          <Head>
            <title>Login</title>
            <meta name="description" content="Generated by create-t3-app" />
            <link rel="icon" href="/favicon.ico" />
          </Head>
          <main className="flex min-h-screen max-w-[100vw] flex-col items-center justify-center overflow-x-hidden">
            <div className="flex w-[250px] flex-col space-y-3">
              <button
                onClick={() => void signIn("google")}
                className="flex w-full items-center justify-center space-x-2 rounded-lg bg-[#2e2e2e] px-6 py-3"
              >
                <FcGoogle className="h-6 w-6 text-white" />
                <span>Login with Google</span>
              </button>
              <button
                onClick={() => void signIn("github")}
                className="flex w-full items-center justify-center space-x-2 rounded-lg bg-[#2e2e2e] px-6 py-3"
              >
                <FaGithub className="h-6 w-6 text-white" />
                <span>Login with Github</span>
              </button>
            </div>
          </main>
        </>
      )}
    </>
  );
};

export default api.withTRPC(MyApp);
